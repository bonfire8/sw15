# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  pull_request:
    branches: [ "master" ]

env:
  DOCKER_IMAGE_NAME: parking
  EC2_HOST: 13.209.162.83
  EC2_SSH_USER: ec2-user
  PRIVATE_KEY: ${{ secrets.PEM_KEY }}
  CONTAINER_NAME: parking
  DOCKER_HUB: nakim81/parking:latest

permissions:
  contents: read

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: make resources directory
      run: mkdir ./src/main/resources
    - name: make application.properties
      run: touch ./src/main/resources/application.properties
    - name: get application.properties values
      run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.properties

    - name: Gradle Permission
      run: chmod +x ./gradlew
    
    - name: Build with Gradle
      uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
      with:
        arguments: build -x test

    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag ${{ secrets.DOCKER_USER_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USER_NAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    
    - name: Push the Docker image
      run: docker push ${{ secrets.DOCKER_USER_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest

  deploy-to-ec2:
    needs: build-and-push-docker
    runs-on: ubuntu-latest

    steps:
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.EC2_HOST }}
        username: ${{ env.EC2_SSH_USER }}
        key: ${{ env.PRIVATE_KEY }}
        script: |
          CONTAINER_ID=$(sudo docker ps -a -q --filter "publish=3000")

          if [ ! -z "$CONTAINER_ID" ]; then
            sudo docker stop $CONTAINER_ID
            sudo docker rm $CONTAINER_ID
          fi

          sudo docker pull ${{ env.DOCKER_HUB }}
          sudo docker run --name ${{ env.CONTAINER_NAME }} -d -p 3000:8080 -e TZ=Asia/Seoul ${{ env.DOCKER_HUB }}
          sudo docker network connect parking-network parking
          sudo docker image prune -f
