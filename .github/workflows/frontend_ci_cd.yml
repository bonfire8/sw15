# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  pull_request:
    branches: ["master"]

env:
  DOCKER_IMAGE_NAME: parking-frontend
  EC2_HOST: 13.209.162.83
  EC2_SSH_USER: ec2-user
  PRIVATE_KEY: ${{ secrets.PEM_KEY }}
  CONTAINER_NAME: parking-frontend
  DOCKER_HUB: nakim81/parking-frontend:latest

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./src/main/frontend

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js 18.15.0
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: ./src/main/frontend/package-lock.json

      - name: .env setting
        run: |
          echo "REACT_APP_KAKAO_APP_KEY=${{ secrets.REACT_APP_KAKAO_APP_KEY }}" >> .env
          echo "REACT_APP_GOOGLE_APP_KEY=${{ secrets.REACT_APP_GOOGLE_APP_KEY }}" >> .env

      - run: npm ci

      - run: CI='false' npm run build --if-present

      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag ${{ secrets.DOCKER_USER_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER_NAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Push the Docker image
        run: docker push ${{ secrets.DOCKER_USER_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest

  deploy-to-ec2:
    needs: build-and-push-docker
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./src/main/frontend

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_SSH_USER }}
          key: ${{ env.PRIVATE_KEY }}
          script: |
            CONTAINER_ID=$(sudo docker ps -a -q --filter "publish=4000")

            if [ ! -z "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            fi

            sudo docker pull ${{ env.DOCKER_HUB }}
            sudo docker run --name ${{ env.CONTAINER_NAME }} -d -p 4000:4000 -e TZ=Asia/Seoul ${{ env.DOCKER_HUB }}
            sudo docker network connect parking-network parking-frontend
            sudo docker image prune -f
